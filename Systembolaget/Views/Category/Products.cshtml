@model CategoryProductsVm
@inject UserService UserService
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@{
    var isAdmin = await UserService.IsCurrentUserAdministratorAsync();
}

<h1 class="text-center my-4">Products in @Model.CategoryName</h1>

@if (Model.Products.Count == 0)
{
    <div class="alert alert-warning text-center">No products available in this category.</div>
}
else
{
    <div class="d-flex flex-wrap justify-content-center">
        @foreach (var product in Model.Products)
        {
            <div class="card m-3"
                style="width: 20rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1); border: 1px solid rgba(194, 194, 194, 0.185); border-radius: 10px;">
                <img src="@product.Picture" class="card-img-top rounded-top" alt="@product.Name"
                    style="height: 150px; width: auto; object-fit: contain; margin: auto; padding-top: 10px;">

                <div class="card-body">
                    <h5 class="card-title text-center mb-2">@product.Name</h5>
                    <p class="card-text text-muted text-center">@product.Description</p>
                    <hr class="my-3">
                    <ul class="list-unstyled mb-3">
                        <li class="d-flex justify-content-between">
                            <span><strong>Alcohol Percentage:</strong></span>
                            <span>@product.Procent%</span>
                        </li>
                        <li class="d-flex justify-content-between">
                            <span><strong>Volume:</strong></span>
                            <span>@product.Volume ml</span>
                        </li>
                        <li class="d-flex justify-content-between">
                            <span><strong>Price:</strong></span>
                            <span>@product.Price SEK</span>
                        </li>
                    </ul>
                    @if (isAdmin)
                    {
                        <div class="d-flex gap-2">
                            <a asp-controller="Systembolaget" asp-action="Edit" asp-route-id="@product.Id"
                                class="btn btn-warning flex-fill">Edit</a>
                            <a asp-controller="Systembolaget" asp-action="Delete" asp-route-id="@product.Id"
                                class="btn btn-danger flex-fill">Delete</a>
                        </div>
                    }
                    else if (SignInManager.IsSignedIn(User))
                    {
                        <div id="product-add-to-cart-@product.Id" class="d-flex justify-content-between">

                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

<div class="text-center mt-4">
    <a asp-action="Index" asp-controller="Category" class="btn btn-secondary shadow-sm">Back to Categories</a>
</div>

<script>
    const quantities = JSON.parse(localStorage.getItem("cartQuantities")) || {};

    function saveQuantitiesToLocalStorage() {
        localStorage.setItem("cartQuantities", JSON.stringify(quantities));
    }

    function productInit(productId, quantity) {
        const addToCartButton = document.getElementById(`product-add-to-cart-${productId}`);
        quantities[productId] = quantity;

        if (quantity === 0) {
            addToCartButton.innerHTML =
                `<button class="btn btn-success flex-fill" onclick="increment(${productId})">Add to cart</button>`;
        } else if (quantity < 9) {
            addToCartButton.innerHTML =
                `<button class="btn btn-danger flex-fill" onclick="decrement(${productId})">-</button>
         <p id="product-quantity-${productId}" class="text-center flex-fill d-flex align-items-center justify-content-center m-0">
             ${quantity}
         </p>
         <button class="btn btn-success flex-fill" onclick="increment(${productId})">+</button>`;
        } else {
            addToCartButton.innerHTML =
                `<button class="btn btn-danger flex-fill" onclick="decrement(${productId})">-</button>
         <p id="product-quantity-${productId}" class="text-center flex-fill d-flex align-items-center justify-content-center m-0">
             ${quantity}
         </p>
         <button class="btn btn-secondary flex-fill" disabled>+</button>`;
        }

        saveQuantitiesToLocalStorage();
    }

    //const quantities = {}; //Object that keeps tracks of each productId as key with its quantity as value

    function increment(productId) {
        if (!quantities[productId]) quantities[productId] = 0; //Initialize quantity to zero if not set
        quantities[productId]++;
        productInit(productId, quantities[productId]); //Re-renders the button with updated values
    }

    function decrement(productId) {
        if (quantities[productId] > 0) {
            quantities[productId]--;
            productInit(productId, quantities[productId]);
        }
    }

    document.addEventListener("DOMContentLoaded", () => { //Client side loads productInit(x, y) with javascript for each card genereated with razor in server side
        const storedQuantities = JSON.parse(localStorage.getItem("cartQuantities")) || {};
    @foreach (var product in Model.Products)
    {
        var productId = product.Id;
        <text> @* <text> in razor ensures the content inside is treated as raw text and then rendered as javascript, without it razor might throw us an error because it might expect html or razor syntax instead *@
                    productInit(@productId, storedQuantities['@productId'] || 0); @* Initializing with 0 as a quantity parameter for each available card to show Add To Cart button on load, unless it has quantity in localstorage *@
        </text>
    }
});

</script>